name: Terraform Deploy with Safe Kubernetes Providers

on:
  push:
    branches: [main]

env:
  AWS_REGION: ap-northeast-2
  CLUSTER_NAME: daenamu-test

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.1

      - name: Download previous tfstate (if exists)
        uses: actions/download-artifact@v4.3.0
        with:
          name: terraform-state
        continue-on-error: true

      - name: Restore tfstate if available
        run: |
          if [ -d terraform-state ]; then
            mv terraform-state/terraform.tfstate .
          fi

      # provider 충돌 방지: Kubernetes/Helm provider 제거
      - name: Temporarily disable kube_providers.tf
        run: |
          mkdir -p skipped
          mv kube_providers.tf skipped/ || true

      - name: Terraform Init
        run: terraform init

      # IAM 리소스 import (기존에 존재할 가능성 있는 것만)
      - name: Import IAM resources
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          terraform import aws_iam_role.alb_sa_role AmazonEKSLoadBalancerControllerRole || true
          terraform import aws_iam_instance_profile.node_group daenamu-test-node-group-instance-profile || true
          terraform import aws_iam_policy.alb_policy arn:aws:iam::${AWS_ACCOUNT_ID}:policy/AWSLoadBalancerControllerIAMPolicy || true

      # 복원 후 Helm, Kubernetes 리소스 문제 없이 처리
      - name: Restore kube_providers.tf
        run: |
          mv skipped/kube_providers.tf . || true

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Generate kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ env.CLUSTER_NAME }} \
            --region ${{ env.AWS_REGION }}

      - name: Upload updated tfstate
        uses: actions/upload-artifact@v4.6.2
        with:
          name: terraform-state
          path: terraform.tfstate
